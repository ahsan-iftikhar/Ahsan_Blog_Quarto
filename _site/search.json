[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Blog Expectations A brief statement about objectives and what to expect from this blog\nWriting and teaching is an exploratory and insightful journey for better understanding and assimilation of knowledge. This blog aims to share my learning journey. Following expectations defines the content in this blog.\n\nMost of the content will focus on areas like data science, tools & technologies and generating valuable insights.\nIn addition, it will feature topics on business, strategy, finance and audit.\nIn almost all the cases, I will not be the originator of knowledge and content, rather it’s an attempt to share my understanding and insights. All original authors and content writers will be adequately referenced.\n\nImportant: None of the posts shared on this blog represent a professional advise. Its rather my perspectives and opinions, which often change frequently. Treat the posts on this blog, as occasional conversations from a friend who is trying to provide or get a better understanding."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Professional & Personal Blog",
    "section": "",
    "text": "Ammonia & Urea Manufacturing\n\n\n\n\n\n\n\n\n\n\n\nJul 20, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nRemNotes & Why I use it\n\n\n\n\n\n\n\n\n\n\n\nAug 5, 2023\n\n\n\n\n\n\n\n\n\n\n\n\nRemNotes & Why I use it\n\n\n\n\n\n\n\n\n\n\n\nAug 5, 2023\n\n\n\n\n\n\n\n\n\n\n\n\nFIle management for R projects\n\n\n\n\n\n\n\n\n\n\n\nAug 4, 2023\n\n\n\n\n\n\n\n\n\n\n\n\nEDA for Titanic\n\n\n\n\n\n\n\n\n\n\n\nJul 2, 2023\n\n\n\n\n\n\n\n\n\n\n\n\nBoard of Directors Evaluation\n\n\n\n\n\n\n\n\n\n\n\nDec 24, 2022\n\n\n\n\n\n\n\n\n\n\n\n\nUnderstanding balanced scorecard\n\n\n\n\n\n\n\n\n\n\n\nSep 13, 2022\n\n\n\n\n\n\n\n\n\n\n\n\nMaking bar chart using ggplot\n\n\n\n\n\n\n\n\n\n\n\nSep 13, 2022\n\n\n\n\n\n\n\n\n\n\n\n\nFinancial Formulas\n\n\n\n\n\n\n\n\n\n\n\nSep 13, 2022\n\n\n\n\n\n\n\n\n\n\n\n\nManual of authority (MoA) | What to include? and more importantly what not to include?\n\n\n\n\n\n\n\n\n\n\n\nAug 24, 2022\n\n\n\n\n\n\n\n\n\n\n\n\nUnderstanding Version Control, Git & Github\n\n\n\n\n\n\n\n\n\n\n\nJul 24, 2022\n\n\nAhsan Iftikhar\n\n\n\n\n\n\n\n\n\n\n\n\nMaking pie chart using ggplot\n\n\n\n\n\n\n\n\n\n\n\nJun 22, 2022\n\n\n\n\n\n\n\n\n\n\n\n\nUsing SSH to connect to Github\n\n\n\n\n\n\n\n\n\n\n\nMay 22, 2022\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/pie_chart_using_ggplot/index.html",
    "href": "posts/pie_chart_using_ggplot/index.html",
    "title": "Making pie chart using ggplot",
    "section": "",
    "text": "A chart depicted by a circle, where the areas of the circle represent 100% proportion. To subdivide the circle into proportion, a line is drawn from axis to the circumference of circle - proportionate dividing the pie based on values.\n\nPie charts are not recommended as a good visualization, rather we can use the bar plots instead."
  },
  {
    "objectID": "posts/pie_chart_using_ggplot/index.html#donut-chart",
    "href": "posts/pie_chart_using_ggplot/index.html#donut-chart",
    "title": "Making pie chart using ggplot",
    "section": "Donut chart",
    "text": "Donut chart\n\nggplot(data = df, mapping = aes(x = \"\", y = share, fill = brand)) +\n  geom_bar(stat = \"identity\", width = 1) +\n  coord_polar(theta = \"y\", start = 0) +\n  geom_text(aes(\n    label = str_c(round(share*100), \"%\")),\n    position = position_stack(vjust = 0.5)\n    ) +\n  theme_void() +\n  scale_fill_brewer(palette = \"Dark2\") +\n  labs(title = \"Manufacturer - Market Share\") +\n  theme(\n    plot.title = element_text(hjust = 0.5, color = \"red\")\n  )\n\n\n\n\n\n\n\n\n\nggplot(data = df, mapping = aes(x = 2, y = share, fill = brand)) +\n  geom_bar(stat = \"identity\", width = 1) +\n  coord_polar(theta = \"y\", start = 0) +\n  geom_text(aes(\n    label = str_c(round(share*100), \"%\")),\n    position = position_stack(vjust = 0.5)\n    ) +\n  theme_void() +\n  scale_fill_brewer(palette = \"Dark2\") +\n  labs(title = \"Manufacturer - Market Share\") +\n  theme(\n    plot.title = element_text(hjust = 0.5, color = \"red\")\n  ) +\n  xlim(0.5, 2.5)"
  },
  {
    "objectID": "posts/moa_key_considerations/index.html",
    "href": "posts/moa_key_considerations/index.html",
    "title": "Manual of authority (MoA) | What to include? and more importantly what not to include?",
    "section": "",
    "text": "Do you struggle with where to start, when developing or reviewing manual of authority? You are not alone and this article will help to make the process more structured and streamlined.\nDeciding on key business activities to be included or excluded in MoA is a key questions encountered by anyone who develops manual of authority. Based on my extensive experience in developing MoA and reviewing corporate governance review following are the key set of rules that should be considered:"
  },
  {
    "objectID": "posts/moa_key_considerations/index.html#activities-crossing-functional-and-departmental-boundaries",
    "href": "posts/moa_key_considerations/index.html#activities-crossing-functional-and-departmental-boundaries",
    "title": "Manual of authority (MoA) | What to include? and more importantly what not to include?",
    "section": "Activities crossing functional and departmental boundaries",
    "text": "Activities crossing functional and departmental boundaries\nAny significant activity which crosses departmental or functional boundaries should not be stated in the manual of authority. On the contrary any activity which does not cross departmental or functional boundaries should be managed through departmental procedures; which can be approved by the Functional Head or CEO of the the organization.\nMany a times, activities related to operational approvals within the same department are stated in MoA, thus rendering the MoA very extensive, in-comprehensible and un-maintainable. The bigger risk is that such a MoA, wherein due care for the above mentioned point is not take, will be fully implemented."
  },
  {
    "objectID": "posts/moa_key_considerations/index.html#acceptance-rejection-rule",
    "href": "posts/moa_key_considerations/index.html#acceptance-rejection-rule",
    "title": "Manual of authority, key cosiderations",
    "section": "Acceptance & rejection rule",
    "text": "Acceptance & rejection rule\nThe activity should represent significant activity which can be accepted or rejected. This implies that procedural activities which are routine in nature and does not require explicit approval should not included in the delegation of authority."
  },
  {
    "objectID": "posts/moa_key_considerations/index.html#only-key-activities-having-significant-operational-and-financial-impact",
    "href": "posts/moa_key_considerations/index.html#only-key-activities-having-significant-operational-and-financial-impact",
    "title": "Manual of authority (MoA) | What to include? and more importantly what not to include?",
    "section": "Only key activities having significant operational and financial impact",
    "text": "Only key activities having significant operational and financial impact\nAlthough determination of significance is a matter of judgment, however, effort should be made to only include the activities which materially impact the operations and have significant financial impact."
  },
  {
    "objectID": "posts/understanding_git/index.html",
    "href": "posts/understanding_git/index.html",
    "title": "Understanding Version Control, Git & Github",
    "section": "",
    "text": "This blog is aimed at novices who are taking their first plunge in understanding and applying version control using git and github. It is suggested to use the mind map and then cover one to two topics in a day.\nBe considerate that version control and effective use of terminal will take some time. Best wishes and happy learning."
  },
  {
    "objectID": "posts/understanding_git/index.html#basic-concept",
    "href": "posts/understanding_git/index.html#basic-concept",
    "title": "Understanding Version Control, Git & Github",
    "section": "Basic Concept",
    "text": "Basic Concept\nCan you relate to the following?\nIf yes then version control using git and github is for you.\n\nA code file is shared with multiple peer for review, wherein each of reviewers will be making updates, giving comments and refactoring the code. During this process you will also be making concurrent changes and a mechanism is desired to track all such changes and make the updates in the final document."
  },
  {
    "objectID": "posts/understanding_git/index.html#benefits",
    "href": "posts/understanding_git/index.html#benefits",
    "title": "Understanding Version Control, Git & Github",
    "section": "Benefits",
    "text": "Benefits\nGit and github specifically addresses the challenge of multiple contributors working on the same project. Key benefits are listed below.\n\nAbility to track changes and updates by different contributor and reviewers.\nAllowing roll back to prior versions.\nDocumentation, via explanatory messages is enforced for future reference. This provide better context to others involved in the project.\nGit automatically notifies when the current work conflicts with someone else’s, so it’s harder (but not impossible) to accidentally overwrite work."
  },
  {
    "objectID": "posts/understanding_git/index.html#typical-use-cases",
    "href": "posts/understanding_git/index.html#typical-use-cases",
    "title": "Understanding Version Control, Git & Github",
    "section": "Typical use cases",
    "text": "Typical use cases\n\nCollaborative projects with multiple contributors.\nOpen and closed source projects.\nFormal tracking of different version during numerous stages of development.\nAbility to revert of earlier version, should things don’t work out as planned."
  },
  {
    "objectID": "posts/understanding_git/index.html#system-global-local",
    "href": "posts/understanding_git/index.html#system-global-local",
    "title": "Understanding Version Control, Git & Github",
    "section": "System, global & local",
    "text": "System, global & local\nSetting up version control via git is a straight forward process, however, git setting are applied at three different levels.\n\n–system: settings for every user on a computer.\n–global: settings applied to every project.\n–local: settings for one specific project.\n\nEach level overrides the one above it, so local settings (per-project) take precedence over global settings (per-user), which in turn take precedence over system settings (for all users on the computer).\nMost of Git’s settings should be left as they are. However, there are two should be set on every computer. Name and email address. These are recorded in the log every time a commit is made, and are often used to identify the authors of a project.\nUse the following code to set the user name, email address and password.\n\ngit config --global user.name \"Your Name\"\n\ngit config --global user.email \"your.email@domain.com\"\n\ngit config --global password \"Password\"\n\nNote: All git commands will have the word ‘git’ as a prefix to all the commands."
  },
  {
    "objectID": "posts/understanding_git/index.html#creating-repository",
    "href": "posts/understanding_git/index.html#creating-repository",
    "title": "Understanding Version Control, Git & Github",
    "section": "Creating Repository",
    "text": "Creating Repository\n\nNew Project (on local machine)\nNew project folder can be started from scratch. The other possibility is using an existing directory and apply version control to it. Both the methods are described below.\n1. New git project: Entering the following command in the terminal will create a named directory, within which the .git folder will be created by default.\n\ngit init project_name\n\n2. Existing folder: In the path of the folder, use the following command to initiate version control for that folder. The command will create a folder .git.\n\ngit init\n\n\n\nCloning a project\nCloning a project is simply making a copy of an existing project; hosted on some server (either on the cloud or on-premises). For a basic comprehension, consider it like getting a copy of the files located on ‘DropBox’ or ‘Google Drive’ to local machine.\nTo create a clone we need the address or URL of the hosting provider and following command is used for creating a copy.\n\n# Cloning a local project\ngit clone /existing/project newprojectname\n\n# Cloning a hosted project\ngit clone https://github.com/URL newprojectname\n\nNote: URL for the hosted project can be easily obtained from the github or other hosting provider.\nIgnoring Files from Version Control\nOften temporary or intermediate files are created, which are not required to be saved. Git can ignore these files or group of files (based on a specified pattern) by creating a file called .gitignore in the root directory of the repository.\n.gitignore can contain a list of wildcard patterns that specify the files that Git should ignore.\nDeleting files\nTo delete a file use the following command in the terminal.\n\ngit rm path/to/file\n\nRemoving Untracked / Unsaved Files\nThese are the files which have been identified in .gitignore file.\nGit can clean up files that are not tracked. The command git clean -n will show a list of files that are in the repository, but whose history Git is not currently tracking. A similar command git clean -f will then delete those files. The command should be used with care. if deleted the files are gone for good."
  },
  {
    "objectID": "posts/understanding_git/index.html#setting-up-a-branch",
    "href": "posts/understanding_git/index.html#setting-up-a-branch",
    "title": "Understanding Version Control, Git & Github",
    "section": "Setting up a branch",
    "text": "Setting up a branch\nBy default, every Git repository has a branch called ‘main’ or ‘master’,\nSetting up a branch is quite easy and it can be accomplished by using the following command in the terminal. This is an efficient way to creating the branch and shift to that branch.\n\n# Method 1 - Creating a branch and switching to it (preferred option)\n\ngit checkout -b branch_name\n\nThe above can also be accomplished by first creating the branch and then shifting to it. Because in involves two steps, the method stated above is preferable.\n\n# Method 2 - Creating a branch first and then switching to that branch\n\n# Create the branch\ngit branch branch_name\n\n# Shift to the branch\ngit checkout branch_name"
  },
  {
    "objectID": "posts/understanding_git/index.html#setting-up-github",
    "href": "posts/understanding_git/index.html#setting-up-github",
    "title": "Understanding Version Control, Git & Github",
    "section": "Setting up Github",
    "text": "Setting up Github\nMost of the times, a project or repository will be hosted on some external or cloud based service provider. Github, Bitbucket and other services provides the hosting services. In this blog we’ll focus on Github (although the process is quite similar for other service provider). Creating an account on Github is as simple as creating a new email address. Sign-up here on Github I trust that creating an account will not be challenging.\nOnce the account has been created. Thereafter, simply create a new repository and get the URL for the repository. See the following snapshot for guidance.\n\n\n\nCreating New Repository, Github\n\n\n\n\n\nURL for, Hosted Repository"
  },
  {
    "objectID": "posts/understanding_git/index.html#connecting-remotes",
    "href": "posts/understanding_git/index.html#connecting-remotes",
    "title": "Understanding Version Control, Git & Github",
    "section": "Connecting Remotes",
    "text": "Connecting Remotes\nHosted version of repositories are termed as remote and identified with a name. Default host name is ‘origin’, however, any custom name is also possible. A remote is like a browser bookmark with a name and a URL.\nList of the remotes can be obtained using the command.\n\ngit remote\n# or \ngit remote -v\n\nWhile inside the repository in the local folder use the following command in the terminal to connect to the hosted repository.\n\ngit remote add remote_name URL/github.com\n\nIt is important to note that the above is not required if a repository has been cloned, since in that case the remote named ‘origin’ is already defined by default.\nIn case when the remote URL has to added via terminal, use the following command. This is especially useful if you plan to use ‘ssh’ to connect with github.\n\ngit remote set-url origin URL_obtained_from_github\n\nIn order to remove a remote already defined for a repository, use the following command.\n\ngit remote rm remote-name"
  },
  {
    "objectID": "posts/understanding_git/index.html#addition-of-files-to-staging-area",
    "href": "posts/understanding_git/index.html#addition-of-files-to-staging-area",
    "title": "Understanding Version Control, Git & Github",
    "section": "Addition of files (to staging area)",
    "text": "Addition of files (to staging area)\nTo add a file to the staging area, use the following command\n\n# To add a specific file (in the following case file is filename.txt)\ngit add filename.txt\n\n# To add all the files in one go\ngit add .\n\nIf there is a mistake and the file has been staged, it can be un-staged using the following.\n\n# To undo additions from staged area, back to local drive\ngit reset HEAD\n\n# Undo addition of a specific file from staged area, back to local drive\ngit reset HEAD path/to/file\n\nIf however, the changes made to a file, which is not staged yet, has to reversed then use the following command in the terminal.\n\n# Reverse changes to a file\ngit checkout -- path/to/file"
  },
  {
    "objectID": "posts/understanding_git/index.html#commit-additions",
    "href": "posts/understanding_git/index.html#commit-additions",
    "title": "Understanding Version Control, Git & Github",
    "section": "Commit additions",
    "text": "Commit additions\nIt saves everything in the staging area as one unit. Upon committing, Git requires to enter a log message. Log message documents why the change was made and what changes have been made.\nBy default, Git launches a text editor, however, to keep things simple, use the option -m “some message in quotes” in the terminal to enter a single-line message. If a commit message is accidentally mistyped then use –amend flag.\n\n# Commit the files/data in the hosted areas\ngit commit -m \"An explanatory message for future reference\"\n\n# Correcting a commit message with --amend\ngit commit --amend -m \"new message\"\n\nIt is possible to add files and commit changes at the same time, using one single command by adding the option -a\n\ngit commit -a -m \"message for the commit\"\n\n\nGood Practice For Commits\nWriting a one-line log message with git commit -m “message”is good enough for very small changes, but collaborators (including your future-self) will appreciate more information about the commit and what changes were made. Good practice for commits is stated below, by means of an example.\n1) Don’t put all of the changes into the staging area at once. For example, suppose while adding a feature to file x, an error is spotted in another file y. Fix the change in y\n2) Since the changes to file y aren’t directly related to the work being done in x, there should be a commit for the fixed version of y.\n3) Thereafter, there should be a separate commit of the features added in the file x."
  },
  {
    "objectID": "posts/understanding_git/index.html#push-to-repository",
    "href": "posts/understanding_git/index.html#push-to-repository",
    "title": "Understanding Version Control, Git & Github",
    "section": "Push to repository",
    "text": "Push to repository\nGit push command, pushes the changes made locally into a remote repository. The following command pushes the contents of branch named ‘branch-name’ into a branch with the same name in the remote repository associated with named ‘remote-name’.\n\ngit push remote-name branch-name\n\n# A practice example\ngit push origin main # 'origin' is the remote name and 'master' is the branch name\n\nIt’s possible to use different branch names at your end and the remote’s end, but doing this quickly becomes confusing: it’s almost always better to use the same names for branches across repositories."
  },
  {
    "objectID": "posts/understanding_git/index.html#pull-from-repository",
    "href": "posts/understanding_git/index.html#pull-from-repository",
    "title": "Understanding Version Control, Git & Github",
    "section": "Pull from repository",
    "text": "Pull from repository\nA typical workflow is to pull collaborators’ work from the remote repository so one have the latest version of everything. Then perform some updates yourself and push such changes back to the remote so that collaborators have access to it.\nPulling changes is straightforward: with the following command, gets everything in a branch for a particular remote and merges it into the current branch of local repository.\n\ngit pull remote branch1\n\n# A practice example\ngit pull origin main # 'origin' is the remote name and 'master' is the branch name\n\nGit stops from pulling changes from a remote repository when doing so might overwrite things done locally. The fix is simple: either commit local changes or revert them, and the pull again."
  },
  {
    "objectID": "posts/understanding_git/index.html#status-of-repository",
    "href": "posts/understanding_git/index.html#status-of-repository",
    "title": "Understanding Version Control, Git & Github",
    "section": "Status of repository",
    "text": "Status of repository\nStatus of the repository needs to be frequently referred while working. This is achieved by using following command, which displays a list of the files that have been modified since the last time changes are saved. It also shows files that are in this staging area.\n\ngit status"
  },
  {
    "objectID": "posts/understanding_git/index.html#log-of-changes",
    "href": "posts/understanding_git/index.html#log-of-changes",
    "title": "Understanding Version Control, Git & Github",
    "section": "Log of changes",
    "text": "Log of changes\nLog is a list of all the commits i.e. updates and changes made to the files. Again to draw parallels it is similar to ‘ls’ command of the linux terminal, however, in this case it lists down all the commits made fo repository.\n\ngit log\n\nLog entries are shown most recent first, and look like this:\n\ncommit 0430705487381195993bac9c21512ccfb511056d\n\nAuthor: Rep Loop &lt;test@test.com&gt;\n\nDate:   Wed Sep 20 13:42:26 2017 +0000\n\nAdded year to report title.\n\nThe commit line displays a unique ID for the commit called a hash. The other lines tells who made the change, when, and what log message wrote for the change.\nA project’s entire log can be overwhelming, so it’s often useful to inspect only the changes to particular files or directories.\nGit log has additional options, which are very useful to see a visual representation of all the commits and how the tree structure has evolved. The following command is a bit long, however, after multiple uses it will become second nature.\n\ngit log --all --decorate --oneline --graph"
  },
  {
    "objectID": "posts/understanding_git/index.html#changes-to-files",
    "href": "posts/understanding_git/index.html#changes-to-files",
    "title": "Understanding Version Control, Git & Github",
    "section": "Changes to files",
    "text": "Changes to files\n\nChanges made in the commit: Using the git log first identify the commit of interest and identify it’s hash value. Based on the commit we are interested in, get the hash number (first 5 or 6 values) and then use the following to list the changes.\n\n\ngit show 6a43f\n\n\nChanges made to a particular file git log displays the overall history of a project or file, but Git can give even more information. The command git annotate print, who made the last change to each line of a file and when.\n\n\ngit annotate file.txt"
  },
  {
    "objectID": "posts/understanding_git/index.html#difference---working-directory-to-staged",
    "href": "posts/understanding_git/index.html#difference---working-directory-to-staged",
    "title": "Understanding Version Control, Git & Github",
    "section": "Difference - working directory to staged",
    "text": "Difference - working directory to staged\nThe section, demonstrates how to identify the difference in files.\nScenario: Updates are made to file in local working director, however, such changes have not been staged. To ascertain the difference between the local file (unstaged to staged), use the following command.\n\ngit diff\n\nNote: There is a possibility that we have added a file in the staged area (without committing) and later we have gone ahead and made further changes in the file in the local working directory.\nIn such cases, my experience has been that ‘git diff’ will point out the difference from the HEAD (commit). This is based on my understanding and experience till now. In the future if there is any further insights, then I’ll update this blog post."
  },
  {
    "objectID": "posts/understanding_git/index.html#difference---staged-to-head-commit",
    "href": "posts/understanding_git/index.html#difference---staged-to-head-commit",
    "title": "Understanding Version Control, Git & Github",
    "section": "Difference - staged to HEAD (commit)",
    "text": "Difference - staged to HEAD (commit)\nThe following shows the difference or changes between the staging area and the HEAD (commit)\n\ngit diff --staged # This one is preferred by me\n# or\ngit diff --cached\n# or\ngit status -v"
  },
  {
    "objectID": "posts/understanding_git/index.html#difference---working-directory-staged-to-head-commit",
    "href": "posts/understanding_git/index.html#difference---working-directory-staged-to-head-commit",
    "title": "Understanding Version Control, Git & Github",
    "section": "Difference - working directory & staged to HEAD (commit)",
    "text": "Difference - working directory & staged to HEAD (commit)\nThe following shows the difference or changes between the working directory and the HEAD (commit)\n\ngit diff HEAD\n# or\ngit status -vv"
  },
  {
    "objectID": "posts/understanding_git/index.html#difference-between-commits",
    "href": "posts/understanding_git/index.html#difference-between-commits",
    "title": "Understanding Version Control, Git & Github",
    "section": "Difference between commits",
    "text": "Difference between commits\nTo get the difference between two commits, use the following command\n\ngit diff 89282ax..237282sx"
  },
  {
    "objectID": "posts/understanding_git/index.html#reading-the-git-diff-output",
    "href": "posts/understanding_git/index.html#reading-the-git-diff-output",
    "title": "Understanding Version Control, Git & Github",
    "section": "Reading the git diff output",
    "text": "Reading the git diff output\nA diff is a formatted display of the differences between two sets of files. Git displays diffs like this:\n\ndiff --git a/report.txt b/report.txt\n\nindex e713b17..4c0742a 100644\n\n--- a/report.txt\n\n+++ b/report.txt\n\n@@ -1,4 +1,4 @@\n\n-# Seasonal Dental Surgeries 2017-18\n\n+# Seasonal Dental Surgeries (2017) 2017-18\n\n TODO: write executive summary.\n\nFollowing is the interpretation of the output of diff command.\n\nThe command used to produce the output (in this case, diff –git). In it, a and b are placeholders meaning “the first version” and “the second version”.\nAn index line showing keys into Git’s internal database of changes.\n— a/report.txt and +++ b/report.txt, indicate lines being removed are prefixed with -, while lines being added are prefixed with +.\nA line starting with @@ tells which lines the changes are being made. The pairs of numbers are start line,number of lines changed. Here, the diff output shows that 4 lines from line 1 are being removed and replaced with new lines.\nA line-by-line listing of the changes with - showing deletions and + showing additions. Lines that haven’t changed are sometimes shown before and after the ones that have in order to give context; when they appear, they don’t have either + or - in front of them."
  },
  {
    "objectID": "posts/understanding_git/index.html#fast-forward-merge",
    "href": "posts/understanding_git/index.html#fast-forward-merge",
    "title": "Understanding Version Control, Git & Github",
    "section": "Fast forward merge",
    "text": "Fast forward merge\nThis is a merge wherein the branch has moved forward as compared to the ‘main’ or the ‘master’ branch. The merge in this case is rather straight forward linear linkage, wherein the content of the ‘master’ or ‘main’ branch is updated with the changes/updates made in the branch.\n\n# Method 1 - Shift to the target branch and merge\ncheckout destination_branch\ngit merge origin_branch\n\n# Method - Directly merging\ngit merge origin_branch destination_banch\n\n# Deleting the branch locally\ngit branch -d origin_branch\n\n# Deleting the branch on github\ngit push -d origin branch_name\n\nIn order to check which of the branches have been merged, use the following command in there terminal to list the branches which have been merged.\n\ngit branch --merged"
  },
  {
    "objectID": "posts/understanding_git/index.html#way-merge",
    "href": "posts/understanding_git/index.html#way-merge",
    "title": "Understanding Version Control, Git & Github",
    "section": "3 Way merge",
    "text": "3 Way merge\n3 way merge occurs, when the child branch has moved on and at the same time there have been changes in the master branch. Such type of scenarios are common for larger projects, where the child branch is used for some feature addition, however, the ‘master’ or the ‘main’ branch is also updated for addition bug fixes or feature updates.\nThe code for the three way merge remains the same as stated above.\nFor 3 way merges, Git looks at multiples commits: first the base commit from which the branches started from and then the last commits for all of the branches."
  },
  {
    "objectID": "posts/understanding_git/index.html#managing-conflicts",
    "href": "posts/understanding_git/index.html#managing-conflicts",
    "title": "Understanding Version Control, Git & Github",
    "section": "Managing conflicts",
    "text": "Managing conflicts\nMerging is a challenging process wherein we have to merge and resolve the conflict. The chronology of the steps is: merge first, then use the diff command to identify and resolve conflicts.\n\nUse the git merge source destination to merge two files. In this case, source is the branch on which one is working whereas destination is the branch on which we want to eventually update all the changes.\n\nIn this case we will get notice that “Automatic merge failed; fix conflicts and then commit the result.”\n\nAfter merging use git diff source destination to identify all the differences.\nThen we have to manually adjust any conflicts that have been made using the nano text editor. The conflict is highlighted in the following format and it is user’s role to retain the correct modification from the following error.\n\nWhile making the edits, delete Git markers i.e. &lt;&lt;&lt;&lt;&lt;&lt;&lt;, ========= and &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; and the changes which have to be deleted.\n\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; destination-branch-name\n...changes from the destination branch...\n=======\n...changes from the source branch...\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; source-branch-name\n\nOnce the conflicts have been resolved then we add and commit the updated file."
  },
  {
    "objectID": "posts/using_ssh_to_connect_to_github/index.html",
    "href": "posts/using_ssh_to_connect_to_github/index.html",
    "title": "Using SSH to connect to Github",
    "section": "",
    "text": "Since github has introduced Personal Access Token (PAT) for security reasons, I find it extremely challenging to connect with github, using PAT, to maintain this blog. Github recommends PAT, however, I find SSH to be much more convenient.\nThe following blog post tries to support anyone who wishes to use SSH.\n\nGenerating the public and private key (either on Linux or WSL on Windows)\n\n\nssh-keygen -t ed25519 -C \"Description for you Reference\"\n\nSelect all the defaults while creating the public key. It is recommended to define a passphrase.\n\nActivating ssh-agent\n\n\neval \"$(ssh-agent -s)\"\n\n\nAdding the key\n\n\nssh-add ~/.ssh/id_ed25519\n\n\nCopy the key and add to Github\n\nCopy the public key using the following command and paste into github.\n\ncat ~/.ssh/ed25519.pub\n\nThe ssh public key has to be inserted into the setting section of github\n\nCheck if ssh connection is established github\n\n\nssh git@github.com"
  },
  {
    "objectID": "posts/financial_formulas/index.html",
    "href": "posts/financial_formulas/index.html",
    "title": "Financial Formulas",
    "section": "",
    "text": "A ready reference for financial formulas, enables to look-up the formula and it’s key input variables for ease in calculation and reference.\nFollowing key financial formulas are covered in this post.\nNote:"
  },
  {
    "objectID": "posts/financial_formulas/index.html#rate-conversion",
    "href": "posts/financial_formulas/index.html#rate-conversion",
    "title": "Financial Formulas",
    "section": "1. Rate Conversion",
    "text": "1. Rate Conversion\n\n1. Periodic Rate of Return (PRR)\nAnnual rate is given and the objective is to convert to periodic rate i.e. convert annual rate of return to either monthly, quarterly or half-yearly return. This cannot be simply achieved by dividing the annual rate by the number of periods. The following formulas has to be used.\n\\[monthly \\space / \\space quarterly \\space / \\space biannually = (1+r)^{\\frac{1}{n}}-1\\] Where\n\nr = annual rate\nn = shorter period for which rate has to be obtained. Thus\n\nn = 12 for monthly\nn = 2 for bi-annually\nn = 4 for quarterly\n\n\nExamples\n\nConvert 17% annual rate to quarterly rate equivalent.\n\n\nSolution: Using the formula \\((1+r)^{\\frac{1}{n}}-1\\) wherein r = 0.17 and n = 4, the quarterly rate is 0.0400\n\n\n\n\n2. Effective Annual Rate (EAR)\n\nWhen compounding is done multiple times in a year and we are interested in finding EAR.\n\nFollowing formula gives the EAR when compounding is done n number of times.\n\\[EAR = (1+\\frac{r}{n})^n -1\\] Where\n\nr = interest rate / compounding period\nn = number of compounding periods\n\nn = 12 for monthly\nn = 2 for bi-annually\nn = 4 for quarterly\n\n\nExamples\n\nAnnual rate of return is 17% which is compounded twice a year. Calculate EAR.\n\n\nSolution: Using the formula \\((1+\\frac{r}{n})^n -1\\) the EAR is 0.1772\n\n\nEffective interest rate per compounding period (similar to PRR, however, in this case compounding is done multiple times in the year)\n\nThis second formula give the effective interest rate per compounding period.\n\\[R = (1+\\frac{r}{n})^\\frac{n}{p} -1\\] Where\n\np = No of payment periods per year\nr = nominal annual interest rate\nn = No. of compounding periods per year\nR = Rate per payment period\n\nExample\n\nAnnual rate of return is 17% which is compounded twice a year and payments are made quarterly. Calculate PRR.\n\n\nSolution: Using the formula \\((1+\\frac{r}{n})^\\frac{n}{p} -1\\) the PRR (with multiple compoundings in a year) is 0.0416"
  },
  {
    "objectID": "posts/financial_formulas/index.html#discounting",
    "href": "posts/financial_formulas/index.html#discounting",
    "title": "Financial Formulas",
    "section": "2. Discounting",
    "text": "2. Discounting\n\n1. Present Value (PV)\nDescribe present value.\n\\[PV = (1 + r)^{-t}\\]\nWhere\n\nr = Annual rate of return\nt = Number of years\n\nExamples\n\nCalculate the present value of 3 year maturity instrument when the rate per annum is 18%.\n\n\nSolution: Using the formula, \\(PV = (1 + r)^{-t}\\) the PV discount value is 0.6086\n\n\n\n2. Present Value (compounded periodically)\nIn this case the formula is just the putting a negative in the exponent i.e. -nt\n\\[PV \\space factor = (1+\\frac{r}{n})^{-nt}\\] Where\n\nr = Annual rate of return\nn = Number of times compounding is done per year\nt = Number of years\n\n\nCalculate the present value of 3 year maturity instrument when the rate per annum is 18% and compounding is done quarterly.\n\n\nSolution: Using the formula, \\(PV = FV.(1+\\frac{r}{n})^{-nt}\\) the PV discount value is 0.1121\n\n\n\n3. Annuity Formula\nDescribe annuity.\n\\[Annuity \\space factor = [1 - \\frac{(1+r)^{-t}}{r}]\\]\nWhere\n\nr = Annual rate of return\nn = Number of times compounding is done per year\nt = Number of years\n\n\n\n3. Future value (compounded once a year)\n\\[PV = (1 + r)^{t}\\]\nWhere\n\nr = Annual rate of return\nt = Number of years\n\n\n\n4. Future Value (compounded periodically)\nCompounding Interest Rate (when compounding more frequent than on yearly basis)\nExamples are monthly, quarterly, bi-annually.\n\\[FV \\space factor = (1+\\frac{r}{n})^{nt}\\]\nWhere\n\nr = Annual interest rate\nn = number times compounding is done on a yearly basis\nt = time in years\n\nExamples"
  },
  {
    "objectID": "posts/financial_formulas/index.html#loan-related",
    "href": "posts/financial_formulas/index.html#loan-related",
    "title": "Financial Formulas",
    "section": "3. Loan Related",
    "text": "3. Loan Related\n\n1. Loan Amortization Method\n\\[A = P\\frac{r(1+r)^n}{(1+r)^n-1}\\] Where\n\nA = payment amount per period\nP = Value of borrowed capital\nr = interest rate per period (it is important to calculate the interest rate for the period. Thus simply divide the annual rate with the number of times payment has to be made per period)\nn = total number of payments or periods\n\nExample\n\nA individual is desirous of taking a loan for USD 50,000. He wishes to settle it in 5 years, with monthly payments. Bank’s determines the interest rate of 14%, based on the risk profile of the individual. Calculate the monthly instalments due from the individual?\n\n\nSolution: Using the formula above \\(A = P\\frac{r(1+r)^n}{(1+r)^n-1}\\) and putting in the values the annuity payment per month is USD 1163.41"
  },
  {
    "objectID": "posts/financial_formulas/index.html#derivative-related-formulas",
    "href": "posts/financial_formulas/index.html#derivative-related-formulas",
    "title": "Financial Formulas",
    "section": "4. Derivative Related Formulas",
    "text": "4. Derivative Related Formulas\n\n1. Forward Rate\n\\[F = S.ln^{(r_2-r_1).t}\\] Where\n\nF = Forward rate\nS = Spot rate (this is generally the closing rate for the date)\n\\(ln\\) = Base of the natural logarithms (2.718)\n\\(r_2\\) = interest free rate of the target currency in which the final settlement will be done.\n\\(r_1\\) = interest free rate of the host currency in which the transaction is done\nt = Time to final settlement (in years)\n\n\n\n2. Fair Value of Derivative\n\\[FV = A.(F-K).(e)^{-r_2.T}\\] Where\n\nFV = Fair value\nA = Amount in the host currency\nK = Strike price (the rate on which the final settlement will be done)\n\n\n\n3. Discounting based Fair Value / Present Value of Derivative\n\\[PV = A.exp(-r_2.T)\\] Where\n\nexp = exponent\n\n\n\n4. Floating Leg of Interest Rate Swaps\n\\[PV_{floating} = F - \\frac{F}{(1+\\frac{r}{n})^{nt}}\\]\nWhere\n\nF = Face value or notional amount\nr = interest rate (decimal)\nn = number of times interest is compounded per year.\nt = time (in years)"
  },
  {
    "objectID": "posts/balanced_scorecard/balanced_scorecard.html",
    "href": "posts/balanced_scorecard/balanced_scorecard.html",
    "title": "Understanding balanced scorecard",
    "section": "",
    "text": "Introduction\n\nTraditional performance measurement metrics over emphasize financial KPIs to the detriment of other key considerations, which are important from strategic and sustainability perspective.\nIn addition to the financial aspects, balanced scorecard considers three key important considerations i.e. internal business processes, learning and growth and customer.\n\n\n\nKey tenants of balanced scorecard\n\nKey perspectives of balanced scorecard and how KPIs are defined in each are stated below.\nFinancial: To succeed financially, how should we appear to our investment stakeholders (equity or debt)\n\nObjectives\nMeasures\nTargets\nInitiatives\n\nInternal business process: To satisfy business objectives what internal business processes must the entity excel at\n\nObjectives\nMeasures\nTargets\nInitiatives\n\nLearning and growth: Aligned with entity’s vision and plans, what learning and growth interventions should be pursued, which will ensure sustainability and gradual improvement.\n\nObjectives\nMeasures\nTargets\nInitiatives\n\nCustomers: How should a company be perceived by it’s customers\n\nObjectives\nMeasures\nTargets\nInitiatives\n\n\n\n\nTypical workflow in setting balanced scorecard\nAn over simplified workflow to understand the process of setting balanced scorecard is stated below\n\n\n\nFlow Chart"
  },
  {
    "objectID": "posts/bar_chart_using_ggplot/index.html",
    "href": "posts/bar_chart_using_ggplot/index.html",
    "title": "Making bar chart using ggplot",
    "section": "",
    "text": "A chart featuring the interaction of a categorical variable and it’s numercial value. More simply, the numercial values are represented by bars, whose length vary based on the value\n\nBar chart is more preferrable than pie charts and mostly better choice to compare values."
  },
  {
    "objectID": "posts/bar_chart_using_ggplot/index.html#bar-chart",
    "href": "posts/bar_chart_using_ggplot/index.html#bar-chart",
    "title": "Making bar chart using ggplot",
    "section": "Bar chart",
    "text": "Bar chart\n\nggplot2::ggplot(data = df, mapping = aes(x = brand, y = share)) +\n  geom_bar(stat = \"identity\")\n\n\n\n\n\n\n\n\n\n# Move this to Abraj R File -----------------------------------------------\nsummary_obs &lt;- tibble(\n  rating = c(\"High\", \"Medium\", \"Low\"),\n  obs = c(0, 2, 7),\n  color = c(\"red\", \"yellow\", \"green\"),\n  ann = c(\"No high rated exception\", \" \", \" \")\n  )\n\n# summary_obs &lt;- summary_obs %&gt;%\n#   mutate(\n#     rating = factor(summary_obs$rating, levels = c(\"High\", \"Medium\", \"Low\"))\n#   )\n\nsummary_obs &lt;- summary_obs %&gt;%\n  mutate(\n    rating = as_factor(rating)\n  )\n\nggplot2::ggplot(data = summary_obs, aes(x = rating, y = obs)) +\n  geom_bar(stat = \"identity\", aes(fill = rating)) +\n  geom_text(aes(label = obs)) +\n  theme_minimal() +\n  scale_fill_manual(values = c(\"red\", \"yellow\", \"green\")) +\n  labs(title = \"Finance & Accounts Review\",\n       subtitle = \"Summary of observations by rating\",\n       x = \"Risk Rating\",\n       y = \"No. of Observations\"\n       ) +\n  theme(\n    legend.position = \"none\"\n  )"
  },
  {
    "objectID": "posts/moa_key_considerations/index.html#acceptance-rejection-rule-for-activities",
    "href": "posts/moa_key_considerations/index.html#acceptance-rejection-rule-for-activities",
    "title": "Manual of authority (MoA) | What to include? and more importantly what not to include?",
    "section": "Acceptance & rejection rule (for activities)",
    "text": "Acceptance & rejection rule (for activities)\nThe second key rule which determines if you should include the activity in MoA is - the activity should represent an activity which can be accepted or rejected. This implies that an element of review, judgement and prudence must be exercised by the person reviewing and approving the activity. Procedural activities which are routine in nature and does not require explicit approval should not included in MoA."
  },
  {
    "objectID": "posts/balanced_scorecard/index.html",
    "href": "posts/balanced_scorecard/index.html",
    "title": "Understanding balanced scorecard",
    "section": "",
    "text": "Introduction\n\nTraditional performance measurement metrics over emphasize financial KPIs to the detriment of other key considerations, which are important from strategic and sustainability perspective.\nIn addition to the financial aspects, balanced scorecard considers three key important considerations i.e. internal business processes, learning and growth and customer.\n\n\n\nKey tenants of balanced scorecard\n\nKey perspectives of balanced scorecard and how KPIs are defined in each are stated below.\nFinancial: To succeed financially, how should we appear to our investment stakeholders (equity or debt)\n\nObjectives\nMeasures\nTargets\nInitiatives\n\nInternal business process: To satisfy business objectives what internal business processes must the entity excel at\n\nObjectives\nMeasures\nTargets\nInitiatives\n\nLearning and growth: Aligned with entity’s vision and plans, what learning and growth interventions should be pursued, which will ensure sustainability and gradual improvement.\n\nObjectives\nMeasures\nTargets\nInitiatives\n\nCustomers: How should a company be perceived by it’s customers\n\nObjectives\nMeasures\nTargets\nInitiatives\n\n\n\n\nTypical workflow in setting balanced scorecard\nAn over simplified workflow to understand the process of setting balanced scorecard is stated below\n\n\n\nFlowchart"
  },
  {
    "objectID": "posts/eda_titanic/index.html",
    "href": "posts/eda_titanic/index.html",
    "title": "EDA for Titanic",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nprint('New updates are being pushed and reflected')\n\n[1] \"New updates are being pushed and reflected\"\n\nhead(iris)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa"
  },
  {
    "objectID": "posts/file_n_folder_mgmt/index.html",
    "href": "posts/file_n_folder_mgmt/index.html",
    "title": "FIle management for R projects",
    "section": "",
    "text": "Reading and writing files can sometimes be challenging. This is an attempt to share the process I am following for making it easy to reading and writing of files in R.\n\n\n\nlibrary(pacman)\npacman::p_load(fs, folderfun, tidyverse)\n\n\n\n\nI have found the package folder function package and fs package to be very useful for file managing files.\n\nfs::path() will be used to construct the path of the location folder\nfolderfun::setff() will be used to define a new function, wherein the first argument is the name of the new function prceded by ff.\n\n\n# Defining the input function\nfolderfun::setff(name = 'In',\n                 fs::path(\"C:/Users/aqureshi037/PycharmProjects/Ahsan_Blog_Quarto\",\n                          \"posts\", \"file_n_folder_Mgmt\", \"input_data\")\n                 )\n\nCreated folder function ffIn(): C:/Users/aqureshi037/PycharmProjects/Ahsan_Blog_Quarto/posts/file_n_folder_Mgmt/input_data\n\n# Defining the ourput function\nfolderfun::setff(name = 'Out',\n                 fs::path(\"C:/Users/aqureshi037/PycharmProjects/Ahsan_Blog_Quarto\",\n                          \"posts\", \"file_n_folder_Mgmt\", \"output_data\")\n                 )\n\nCreated folder function ffOut(): C:/Users/aqureshi037/PycharmProjects/Ahsan_Blog_Quarto/posts/file_n_folder_Mgmt/output_data\n\n\n\n\n\niris.csv file is already located in the ‘input’ folder.\n\ndata(iris)\n\n#Writing the data to the folder\nreadr::write_csv(iris, ffOut(\"iris.csv\"))\n\n\n#Reading the data from the folder\niris_data &lt;- readr::read_csv(ffIn(\"iris.csv\"))\n\nRows: 150 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): Species\ndbl (4): Sepal.Length, Sepal.Width, Petal.Length, Petal.Width\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "posts/file_n_folder_mgmt/index.html#reading-required-pacakges.",
    "href": "posts/file_n_folder_mgmt/index.html#reading-required-pacakges.",
    "title": "FIle management for R projects",
    "section": "",
    "text": "pacman::p_load(fs, folderfun, tidyverse)"
  },
  {
    "objectID": "posts/file_n_folder_mgmt/index.html#define-the-path-wherein-the-input-and-output-will-be-located-in-the-local-drive.",
    "href": "posts/file_n_folder_mgmt/index.html#define-the-path-wherein-the-input-and-output-will-be-located-in-the-local-drive.",
    "title": "FIle management for R projects",
    "section": "",
    "text": "I have found the package folder function package and fs package to be very useful for file managing files.\n\nfs::path() will be used to construct the path of the location folder\nfolderfun::setff() will be used to define a new function, wherein the first argument is the name of the new function prceded by ff.\n\n\n# Defining the input function\nfolderfun::setff(name = 'In',\n                 fs::path(\"C:/Users/aqureshi037/PycharmProjects/Ahsan_Blog_Quarto\",\n                          \"posts\", \"file_n_folder_Mgmt\", \"input_data\")\n                 )\n\nCreated folder function ffIn(): C:/Users/aqureshi037/PycharmProjects/Ahsan_Blog_Quarto/posts/file_n_folder_Mgmt/input_data\n\n# Defining the ourput function\nfolderfun::setff(name = 'Out',\n                 fs::path(\"C:/Users/aqureshi037/PycharmProjects/Ahsan_Blog_Quarto\",\n                          \"posts\", \"file_n_folder_Mgmt\", \"output_data\")\n                 )\n\nCreated folder function ffOut(): C:/Users/aqureshi037/PycharmProjects/Ahsan_Blog_Quarto/posts/file_n_folder_Mgmt/output_data"
  },
  {
    "objectID": "posts/file_n_folder_mgmt/index.html#reading-of-the-file",
    "href": "posts/file_n_folder_mgmt/index.html#reading-of-the-file",
    "title": "FIle management for R projects",
    "section": "",
    "text": "iris.csv file is already located in the ‘input’ folder.\n\ndata(iris)\n\n#Writing the data to the folder\nreadr::write_csv(iris, ffOut(\"iris.csv\"))\n\n\n#Reading the data from the folder\niris_data &lt;- readr::read_csv(ffIn(\"iris.csv\"))\n\nRows: 150 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): Species\ndbl (4): Sepal.Length, Sepal.Width, Petal.Length, Petal.Width\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "posts/file_n_folder_mgmt/index.html#reading-required-packages.",
    "href": "posts/file_n_folder_mgmt/index.html#reading-required-packages.",
    "title": "FIle management for R projects",
    "section": "",
    "text": "library(pacman)\npacman::p_load(fs, folderfun, tidyverse)"
  },
  {
    "objectID": "posts/remnotes/remnotes.html",
    "href": "posts/remnotes/remnotes.html",
    "title": "RemNotes & Why I use it",
    "section": "",
    "text": "Remnote is a powerful notes taking program which is available both as on online version and as a web application.\nKey features of the applications are - Ability to link notes - Configuring notes for space repetition - Good PDF notes taking editor which allows to take notes while reading a document. - Defining your own templates to structure your notes - Pleasant UI for all you notes.\nComplete details of all the features are available on the RemNotes Website\nThere are other options, however, in my view Remnote is the best. I believe I was one of the early adopters and I have seen the evolution over the years. Continuously new features are being added and this has greatly improved the overall value proposition offered by Remnote.\nLastly you can try the application using this link. This will give me some credit, however, seeking credit is not the reason to post this link. I genuinely love Remnote and I believe it one the best tool."
  },
  {
    "objectID": "posts/ammonia_&_urea_manufacturing/index.html",
    "href": "posts/ammonia_&_urea_manufacturing/index.html",
    "title": "Ammonia & Urea Manufacturing",
    "section": "",
    "text": "Introduction\nChecking"
  },
  {
    "objectID": "posts/remnotes/index.html",
    "href": "posts/remnotes/index.html",
    "title": "RemNotes & Why I use it",
    "section": "",
    "text": "Remnote is a powerful notes taking program which is available both as on online version and as a web application.\nKey features of the applications are - Ability to link notes - Configuring notes for space repetition - Good PDF notes taking editor which allows to take notes while reading a document. - Defining your own templates to structure your notes - Pleasant UI for all you notes.\nComplete details of all the features are available on the RemNotes Website\nThere are other options, however, in my view Remnote is the best. I believe I was one of the early adopters and I have seen the evolution over the years. Continuously new features are being added and this has greatly improved the overall value proposition offered by Remnote.\nLastly you can try the application using this link. This will give me some credit, however, seeking credit is not the reason to post this link. I genuinely love Remnote and I believe it one the best tool."
  }
]